package calculator_test

import (
	"fmt"
	"testing"

	"github.com/ReanGD/runify/server/provider/calculator/ast"
	"github.com/ReanGD/runify/server/provider/calculator/gocc/lexer"
	"github.com/ReanGD/runify/server/provider/calculator/gocc/parser"
	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/suite"
)

type CalcSuite struct {
	suite.Suite
}

func (s *CalcSuite) TestInt() {
	var tests = []struct {
		expression string
		result     int64
	}{
		// add + sub
		{"1 + 2", 3},
		{"1 - 2", -1},
		{"1 +  2 +3", 6},
		{"1 -  2 -3", -4},
		{"123 + 2345+ 345678", 348146},
		{"123 - 2345- 345678", -347900},
		{"-10+1", -9},
		{"+10-1", 9},
		{"- 123+- 5", -128},
		{"+ 123-+ 5", 118},
		// mul + div
		{"2 * 3", 6},
		{"2 / 3", 0},
		{"12 * 3 *5", 180},
		{"12 / 3 /5", 0},
		{"-55 * 3", -165},
		{"-55 / 3", -18},
		{"+55* -3", -165},
		{"+55/ -3", -18},
		// mul + div + add + sub
		{"1 + 2 * 3", 7},
		{"1 - 2 * 3", -5},
		{"1 + 2 / 3", 1},
		{"1 - 2 / 3", 1},
		{"1 * 2 + 3", 5},
		{"1 * 2 - 3", -1},
		{"1 / 2 + 3", 3},
		{"1 / 2 - 3", -3},
		{"1 + 2 * 3 + 4", 11},
		{"1 - 2 * 3 - 4", -11},
		{"1 + 2 / 3 + 4", 5},
		{"1 - 2 / 3 - 4", -3},
		{"1 * 2 + 3 * 4", 14},
		{"1 * 2 - 3 * 4", -10},
		{"1 / 2 + 3 / 4", 3},
		{"1 / 2 - 3 / 4", -1},
		// mul + div + add + sub + paren
		{"(1 + 2) * 3", 9},
		{"(1 - 2) * 3", -3},
		{"(1 + 2) / 3", 1},
		{"(1 - 2) / 3", 0},
		{"(1 * 2) + 3", 5},
		{"(1 * 2) - 3", -1},
		{"(1 / 2) + 3", 3},
		{"(1 / 2) - 3", -3},
		{"(1 + 2) * 3 + 4", 13},
		{"(1 - 2) * 3 - 4", -7},
		{"(1 + 2) / 3 + 4", 5},
		{"(1 - 2) / 3 - 4", -3},
		{"(1 * 2) + 3 * 4", 14},
		{"(1 * 2) - 3 * 4", -10},
		{"(1 / 2) + 3 / 4", 3},
		{"(1 / 2) - 3 / 4", -1},
		{"(1 + 2) * (3 + 4)", 21},
		{"(1 - 2) * (3 - 4)", 1},
		{"(1 + 2) / (3 + 4)", 0},
		{"(1 - 2) / (3 - 4)", 0},
		{"(1 * 2) + (3 * 4)", 14},
		{"(1 * 2) - (3 * 4)", -10},
		{"(1 / 2) + (3 / 4)", 3},
		{"(1 / 2) - (3 / 4)", -1},
		{"(1 + 2) * (3 + 4) + 5", 26},
		{"(1 - 2) * (3 - 4) - 5", -4},
		{"(1 + 2) / (3 + 4) + 5", 5},
		{"(1 - 2) / (3 - 4) - 5", -5},
		{"(1 * 2) + (3 * 4) + 5", 19},
		{"(1 * 2) - (3 * 4) - 5", -15},
		{"(1 / 2) + (3 / 4) + 5", 8},
		{"(1 / 2) - (3 / 4) - 5", -2},
		{"(1 + 2) * (3 + 4) * 5", 130},
		{"(1 - 2) * (3 - 4) * 5", -5},
		{"(1 + 2) / (3 + 4) * 5", 5},
		{"(1 - 2) / (3 - 4) * 5", -5},
		{"(1 * 2) + (3 * 4) * 5", 65},
		{"(1 * 2) - (3 * 4) * 5", -35},
		{"(1 / 2) + (3 / 4) * 5", 8},
		{"(1 / 2) - (3 / 4) * 5", -2},
		{"(1 + 2) * (3 + 4) / 5", 4},
		{"(1 - 2) * (3 - 4) / 5", 0},
		{"(1 + 2) / (3 + 4) / 5", 0},
		{"(1 - 2) / (3 - 4) / 5", 0},
		{"(1 * 2) + (3 * 4) / 5", 3},
		{"(1 * 2) - (3 * 4) / 5", -1},
		{"(1 / 2) + (3 / 4) / 5", 0},
		{"(1 / 2) - (3 / 4) / 5", 0},
		{"(1 + 2) * (3 + 4) / 5 * 6", 24},
		{"(1 - 2) * (3 - 4) / 5 * 6", 0},
		{"(1 + 2) / (3 + 4) / 5 * 6", 0},
		{"(1 - 2) / (3 - 4) / 5 * 6", 0},
		{"(1 * 2) + (3 * 4) / 5 * 6", 18},
		{"(1 * 2) - (3 * 4) / 5 * 6", -6},
		{"(1 / 2) + (3 / 4) / 5 * 6", 0},
		{"(1 / 2) - (3 / 4) / 5 * 6", 0},
		{"(1 + 2) * (3 + 4) / 5 / 6", 0},
		{"(1 - 2) * (3 - 4) / 5 / 6", 0},
		{"(1 + 2) / (3 + 4) / 5 / 6", 0},
		{"(1 - 2) / (3 - 4) / 5 / 6", 0},
		{"(1 * 2) + (3 * 4) / 5 / 6", 0},
		{"(1 * 2) - (3 * 4) / 5 / 6", 0},
		{"(1 / 2) + (3 / 4) / 5 / 6", 0},
		{"(1 / 2) - (3 / 4) / 5 / 6", 0},
		// mul + div + add + sub + paren + unary
		{"-(1 + 2) * 3", -9},
		{"-(1 - 2) * 3", 3},
		{"-(1 + 2) / 3", -1},
		{"-(1 - 2) / 3", 0},
		{"-(1 * 2) + 3", -1},
		{"-(1 * 2) - 3", -5},
		{"-(1 / 2) + 3", 2},
		{"-(1 / 2) - 3", -4},
		{"-(1 + 2) * 3 + 4", -5},
		{"-(1 - 2) * 3 - 4", 7},
		{"-(1 + 2) / 3 + 4", 3},
		{"-(1 - 2) / 3 - 4", -3},
		{"-(1 * 2) + 3 * 4", 10},
		{"-(1 * 2) - 3 * 4", -14},
		{"-(1 / 2) + 3 / 4", 2},
		{"-(1 / 2) - 3 / 4", -4},
		{"-(1 + 2) * (3 + 4)", -21},
		{"-(1 - 2) * (3 - 4)", -1},
		{"-(1 + 2) / (3 + 4)", 0},
		{"-(1 - 2) / (3 - 4)", 0},
		{"-(1 * 2) + (3 * 4)", 10},
		{"-(1 * 2) - (3 * 4)", -14},
		{"-(1 / 2) + (3 / 4)", 2},
		{"-(1 / 2) - (3 / 4)", -4},
		{"-(1 + 2) * (3 + 4) + 5", -16},
		{"-(1 - 2) * (3 - 4) - 5", 4},
		{"-(1 + 2) / (3 + 4) + 5", 5},
		{"-(1 - 2) / (3 - 4) - 5", -5},
		{"-(1 * 2) + (3 * 4) + 5", 15},
		{"-(1 * 2) - (3 * 4) - 5", -19},
		{"-(1 / 2) + (3 / 4) + 5", 8},
		{"-(1 / 2) - (3 / 4) - 5", -2},
		{"-(1 + 2) * (3 + 4) * 5", -105},
		{"-(1 - 2) * (3 - 4) * 5", 5},
		{"-(1 + 2) / (3 + 4) * 5", -5},
		{"-(1 - 2) / (3 - 4) * 5", 5},
		{"-(1 * 2) + (3 * 4) * 5", 55},
		{"-(1 * 2) - (3 * 4) * 5", -25},
		{"-(1 / 2) + (3 / 4) * 5", 8},
		{"-(1 / 2) - (3 / 4) * 5", -2},
		{"-(1 + 2) * (3 + 4) / 5", -4},
		{"-(1 - 2) * (3 - 4) / 5", 0},
		{"-(1 + 2) / (3 + 4) / 5", 0},
		{"-(1 - 2) / (3 - 4) / 5", 0},
		{"-(1 * 2) + (3 * 4) / 5", -3},
		{"-(1 * 2) - (3 * 4) / 5", 1},
		{"-(1 / 2) + (3 / 4) / 5", 0},
		{"-(1 / 2) - (3 / 4) / 5", 0},
		{"-(1 + 2) * (3 + 4) / 5 * 6", -24},
		{"-(1 - 2) * (3 - 4) / 5 * 6", 0},
		{"-(1 + 2) / (3 + 4) / 5 * 6", 0},
		{"-(1 - 2) / (3 - 4) / 5 * 6", 0},
		{"-(1 * 2) + (3 * 4) / 5 * 6", -18},
		{"-(1 * 2) - (3 * 4) / 5 * 6", 6},
		{"-(1 / 2) + (3 / 4) / 5 * 6", 0},
		{"-(1 / 2) - (3 / 4) / 5 * 6", 0},
		{"-(1 + 2) * (3 + 4) / 5 / 6", 0},
		{"-(1 - 2) * (3 - 4) / 5 / 6", 0},
		{"-(1 + 2) / (3 + 4) / 5 / 6", 0},
		{"-(1 - 2) / (3 - 4) / 5 / 6", 0},
		{"-(1 * 2) + (3 * 4) / 5 / 6", 0},
		{"-(1 * 2) - (3 * 4) / 5 / 6", 0},
		{"-(1 / 2) + (3 / 4) / 5 / 6", 0},
		{"-(1 / 2) - (3 / 4) / 5 / 6", 0},
	}

	for _, tdata := range tests {
		expression := tdata.expression
		testName := fmt.Sprintf("%s == %d", expression, tdata.result)
		p := parser.NewParser()
		s.T().Run(testName, func(t *testing.T) {
			s := lexer.NewLexer([]byte(expression))
			res, err := p.Parse(s)
			require.NoError(t, err, expression)
			typedVal, ok := res.(*ast.Value)
			require.True(t, ok, expression)
			require.Equal(t, tdata.result, typedVal.Value(), expression)
		})
	}
}

func TestCalcSuite(t *testing.T) {
	suite.Run(t, new(CalcSuite))
}
