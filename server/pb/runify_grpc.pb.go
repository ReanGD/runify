// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: proto/runify.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunifyClient is the client API for Runify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunifyClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Runify_ConnectClient, error)
}

type runifyClient struct {
	cc grpc.ClientConnInterface
}

func NewRunifyClient(cc grpc.ClientConnInterface) RunifyClient {
	return &runifyClient{cc}
}

func (c *runifyClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Runify_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Runify_ServiceDesc.Streams[0], "/runify.Runify/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &runifyConnectClient{stream}
	return x, nil
}

type Runify_ConnectClient interface {
	Send(*UIMessage) error
	Recv() (*SrvMessage, error)
	grpc.ClientStream
}

type runifyConnectClient struct {
	grpc.ClientStream
}

func (x *runifyConnectClient) Send(m *UIMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *runifyConnectClient) Recv() (*SrvMessage, error) {
	m := new(SrvMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RunifyServer is the server API for Runify service.
// All implementations must embed UnimplementedRunifyServer
// for forward compatibility
type RunifyServer interface {
	Connect(Runify_ConnectServer) error
	mustEmbedUnimplementedRunifyServer()
}

// UnimplementedRunifyServer must be embedded to have forward compatible implementations.
type UnimplementedRunifyServer struct {
}

func (UnimplementedRunifyServer) Connect(Runify_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedRunifyServer) mustEmbedUnimplementedRunifyServer() {}

// UnsafeRunifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunifyServer will
// result in compilation errors.
type UnsafeRunifyServer interface {
	mustEmbedUnimplementedRunifyServer()
}

func RegisterRunifyServer(s grpc.ServiceRegistrar, srv RunifyServer) {
	s.RegisterService(&Runify_ServiceDesc, srv)
}

func _Runify_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RunifyServer).Connect(&runifyConnectServer{stream})
}

type Runify_ConnectServer interface {
	Send(*SrvMessage) error
	Recv() (*UIMessage, error)
	grpc.ServerStream
}

type runifyConnectServer struct {
	grpc.ServerStream
}

func (x *runifyConnectServer) Send(m *SrvMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *runifyConnectServer) Recv() (*UIMessage, error) {
	m := new(UIMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Runify_ServiceDesc is the grpc.ServiceDesc for Runify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runify.Runify",
	HandlerType: (*RunifyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Runify_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/runify.proto",
}
