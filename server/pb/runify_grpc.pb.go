// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: proto/runify.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunifyClient is the client API for Runify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunifyClient interface {
	GetRoot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Commands, error)
	GetActions(ctx context.Context, in *CommandID, opts ...grpc.CallOption) (*Actions, error)
	Execute(ctx context.Context, in *ActionID, opts ...grpc.CallOption) (*Result, error)
}

type runifyClient struct {
	cc grpc.ClientConnInterface
}

func NewRunifyClient(cc grpc.ClientConnInterface) RunifyClient {
	return &runifyClient{cc}
}

func (c *runifyClient) GetRoot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Commands, error) {
	out := new(Commands)
	err := c.cc.Invoke(ctx, "/runify.Runify/GetRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runifyClient) GetActions(ctx context.Context, in *CommandID, opts ...grpc.CallOption) (*Actions, error) {
	out := new(Actions)
	err := c.cc.Invoke(ctx, "/runify.Runify/GetActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runifyClient) Execute(ctx context.Context, in *ActionID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/runify.Runify/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunifyServer is the server API for Runify service.
// All implementations must embed UnimplementedRunifyServer
// for forward compatibility
type RunifyServer interface {
	GetRoot(context.Context, *Empty) (*Commands, error)
	GetActions(context.Context, *CommandID) (*Actions, error)
	Execute(context.Context, *ActionID) (*Result, error)
	mustEmbedUnimplementedRunifyServer()
}

// UnimplementedRunifyServer must be embedded to have forward compatible implementations.
type UnimplementedRunifyServer struct {
}

func (UnimplementedRunifyServer) GetRoot(context.Context, *Empty) (*Commands, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoot not implemented")
}
func (UnimplementedRunifyServer) GetActions(context.Context, *CommandID) (*Actions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActions not implemented")
}
func (UnimplementedRunifyServer) Execute(context.Context, *ActionID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedRunifyServer) mustEmbedUnimplementedRunifyServer() {}

// UnsafeRunifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunifyServer will
// result in compilation errors.
type UnsafeRunifyServer interface {
	mustEmbedUnimplementedRunifyServer()
}

func RegisterRunifyServer(s grpc.ServiceRegistrar, srv RunifyServer) {
	s.RegisterService(&Runify_ServiceDesc, srv)
}

func _Runify_GetRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunifyServer).GetRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runify.Runify/GetRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunifyServer).GetRoot(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runify_GetActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunifyServer).GetActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runify.Runify/GetActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunifyServer).GetActions(ctx, req.(*CommandID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runify_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunifyServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runify.Runify/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunifyServer).Execute(ctx, req.(*ActionID))
	}
	return interceptor(ctx, in, info, handler)
}

// Runify_ServiceDesc is the grpc.ServiceDesc for Runify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runify.Runify",
	HandlerType: (*RunifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoot",
			Handler:    _Runify_GetRoot_Handler,
		},
		{
			MethodName: "GetActions",
			Handler:    _Runify_GetActions_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Runify_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/runify.proto",
}
